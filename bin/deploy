#!/usr/bin/env node
import { Web3 } from "web3"
import fs from "fs"
import dotenv from "dotenv"

// Loading the contract ABI and Bytecode
// (the results of a previous compilation step)
const abi = JSON.parse(fs.readFileSync("build/KashMeme.abi"));
// console.log(abi);

const bytecode = fs.readFileSync("build/KashMeme.bin");
// console.log(bytecode);


async function main() {
    // Configuring the connection to an Ethereum node
    const web3 = new Web3(new Web3.providers.HttpProvider(process.env.RPC_NODE));

    // Creating a signing account from a private key
    const signer = web3.eth.accounts.privateKeyToAccount('0x' + process.env.SIGNER_PRIVATE_KEY);
    web3.eth.accounts.wallet.add(signer);

    // Using the signing account to deploy the contract
    const contract = new web3.eth.Contract(abi);
    contract.options.data = bytecode;
    const deployTx = contract.deploy();
    const gas = await deployTx.estimateGas();
    console.log(gas);
    const deployedContract = await deployTx
        .send({
            from: signer.address,
            gas: gas,
        })
        .once("transactionHash", (txhash) => {
            console.log(`Mining deployment transaction ...`);
            console.log(txhash);
        });
    // The contract is now deployed on chain!
    console.log(`Contract deployed at ${deployedContract.options.address}`);
    console.log(
        `Add DEMO_CONTRACT to the.env file to store the contract address: ${deployedContract.options.address}`,
    );
}

dotenv.config();
main();
